#summary One-sentence summary of this page.

= Introduction =

The interfaces to connect to VeSPA are elaborated below. You can download the entire interface file from <a href="http://code.google.com/p/kth-vespa/source/browse/trunk/interfaces/interfaces.proto">here</a>. 

<P>
Further details on the main interfaces are discussed here. 
</P>


<BR> 
==Interfaces==
Google Protocol Buffer is used to connect. 

<BR> 
===Voucher===
Obtaining an X.509 certificate requires getting a voucher from LTCA. Having sent the voucher request to the server, a valid voucher is sent to your kth email, be used in obtaining X.509 certificate. 

The voucher request format is defined as below:
{{{
message msgVoucherReq_V2LTCA {
	required int32 iReqType = 1 [default = -1];
        required string strUserName = 2 [default = ""];
        required string strPwd = 3 [default = ""];
	required string strEmailAddress = 4 [default = ""];
	required string strCaptcha = 5 [default = ""]; 
	required int32 iNonce = 6 [default = -1];
	required int64 tTimeStamp = 7 [default = -1];
};
}}}

The voucher response format is as below: 
{{{
message msgVoucherRes_LTCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo signer = 2;
	required string strVoucher = 3 [default = ""];
	required int32 iNonce = 4 [default = -1];
	required int64 tTimeStamp = 5 [default = -1];
	required msgError stErrInfo = 6;
	optional msgSignature stSign = 7;
};
}}}



<BR> 
===X509 Certificate===
Having received a voucher, one can receive an X.509 certificate. Creating the certificate signing request requires to add the same email address inside. 

The X.509 certificate request format is as below: 
{{{
message msgX509CertReq_V2LTCA {
	required int32 iReqType = 1 [default = -1];
	required int32 iLTCAIdRange = 2 [default = -1];
	required string strProofOfPossessionVoucher = 3 [default = ""];
	required string strX509CertReq = 4 [default = ""];
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
};
}}}

The response format to receive X.509 certificate is defined as: 
{{{
message msgX509CertRes_LTCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo signer = 2;
	required string strReqIdentification = 3 [default = ""];
	required string strX509Cert = 4 [default = ""];
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	required msgError stErrInfo = 7;
	optional msgSignature stSign = 8;
};
}}}



<BR> 
===Ticket===
VeSPA is a ticket-based system, equipping users to obtain their desired services using a valid ticket. Moreover, it provides Single-Sign-On (SSO) scheme so that users can get authenticated once and use the rest of the services, accordingly. 

The format of a ticket is defined as below: 

{{{
message msgTicketReq {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo signer = 2;
	required uint32 uiServices = 3 [default = 0];
	required uint32 uiPsnymCertNoRequest = 4 [default = 0];
	required int32 iLTCAIdRange = 5 [default = -1];
	required int32 iPCAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
        required string strX509Cert = 9[default = ""];
	optional msgSignature stSign = 10;
};
}}}

The response of a ticket is as follows:

{{{
message msgTicketRes {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo signer = 2;
	required int32 iTicketSize = 3 [default = -1];
	required string strTicket = 4 [default = ""]; 
	required uint32 uiMaxNoPsnymCert = 5 [default = 0];
	required int32 iLTCAIdRange = 6 [default = -1];
	required int32 iPCAIdRange = 7 [default = -1];
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	required msgError stErrInfo = 10;
	optional msgSignature stSign = 11;
};
}}}


Tickets are processed by the appropriate service providers while users are not involved in the process. Each ticket has the following format: 

{{{
message msgTicketFormat {
	required int32 iTicketType = 1 [default = -1];
	optional msgSignerInfo signer = 2;
	required string strTicketSerialNo = 3 [default = ""];
	required string strTicketIdentifiableKey = 4 [default = ""];
	required int32 iLTCAIdRange = 5 [default = -1];
	required int32 iPCAIdRange = 6 [default = -1];
	required uint32 uiMaxNoPsnymCert = 7 [default = 0];
	required msgVehicleAttributes stVehicleRole = 8;
	required bool bIsForeignTicket = 9 [default = false];
	required int64 tTicketStartTime = 10 [default = -1];
	required int64 tTicketLifeTime = 11 [default = -1];
	required int64 tPsnymStartTime = 12 [default = -1];
	required int64 tPsnymExpiryTime = 13 [default = -1];
	optional msgSignature stSign = 14;
};
}}}



<BR> 
===Pseudonym===
Pseudonymous certificate is considered a conditional anonymous certificate, used to protect legitimate users' privacy. Users obtain the services, as X.509 certificate, without revealing their real identity. In order to obtain a pseudonymous certificate, the request should be sent to the PCA as the following format: 

{{{
message msgPsnymCertReq_V2PCA {
	required int32 iReqType = 1 [default = -1];
	required int32 iTicketSize = 2 [default = -1];
	required string strTicket = 3 [default = ""];
	required int32 iLTCAIdRange = 4 [default = -1];
	required int32 iPCAIdRange = 5 [default = -1];
	required int32 iLocation = 6 [default = -1];
	required uint32 uiPsnymCertNo = 7 [default = 0];
	repeated msgWAVECertificateRequest pstPsnymCertReq = 8;
	required int32 iNonce = 9 [default = -1];
	required int64 tTimeStamp = 10 [default = -1];
};
}}}

The response from PCA to the users is as follows: 

{{{
message msgPsnymCertRes_PCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo signer = 2;
	required string strReqIdentification = 3 [default = ""];
	required int32 iLTCAIdRange = 4 [default = -1];
	required int32 iPCAIdRange = 5 [default = -1];
	required uint32 uiPsnymCertNo = 6 [default = 0];
	repeated msgPsnymCertFormat stPsnymCert = 7;
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	required msgError stErrInfo = 10;
	optional msgSignature stSign = 11;
};
}}}


You can download the entire interface file from <a href="http://code.google.com/p/kth-vespa/source/browse/trunk/interfaces/interfaces.proto" target="_blank">here</a>.