#summary One-sentence summary of this page.

= Introduction =

Using Google Protocol-Buffer, one can communicate with the system in almost every language, as stated in <a href="https://developers.google.com/protocol-buffers/docs/reference/other">official website</a>. Before start sending the requests to the PKI, follow this link to read more about Google Protocol Buffer:
<a href="https://developers.google.com/protocol-buffers/docs/tutorials">Tutorials for Developers</a>. You can also add the plugin into your IDE:
<a href="http://plugins.netbeans.org/plugin/15724/protocol-buffers-netbeans-plugin">Netbeans</a>. 

The interfaces to the PKI is located: <a href="http://code.google.com/p/kth-vespa/source/browse/trunk/interfaces/interfaces.proto">here</a>.

=Communication=
The communication to VeSPA is through XMLRPC, available for every programming language. The library can be downloaded from <a href="http://xmlrpc-c.sourceforge.net/">xmlrpc-c</a>. A simple example is also availabe in <a href="http://sourceforge.net/p/xmlrpc-c/code/HEAD/tree/trunk/examples/cpp/sample_add_client_complex.cpp">example</a>.


<BR>
= C/C++ APIs =
A simple hint on connecting to the servers in C/C++: 

{{{
interfaces::msgVoucherReq_V2LTCA stV2LTCA;

stV2LTCA.set_ireqtype(REQ_VOUCHER_VEHICLE_TO_LTCA_USING_PROTO_BUFF);
stV2LTCA.set_strusername(strUserName);
stV2LTCA.set_strpwd(strPwd);
stV2LTCA.set_stremailaddress(strEmailAddress);
stV2LTCA.set_strcaptcha(strCapcha);
iNonce = m_cmnUtils.getRnd();
stV2LTCA.set_inonce(iNonce);
stV2LTCA.set_ttimestamp(tTimeStamp);

std::string strSerialized;
if (!stV2LTCA.SerializeToString(&strSerialized)) {
       fprintf(stderr, "\nThe serialization failed on voucher request. "
}

strSerializedOutputData = encodeBase64(strSerialized, strSerialized.length());
}}}

<BR>
= Java APIs =
A simple hint on connecting to the servers in Java: 


<BR>
= Python APIs =
A simple hint on connecting to the servers in Python: